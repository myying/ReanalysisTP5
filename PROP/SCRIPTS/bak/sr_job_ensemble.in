#!/bin/bash -l

#SBATCH --account=nn9481k --qos=short

#SBATCH -J  TP5_ens04

#SBATCH -N 32   # number of nodes
##SBATCH -n 30   # number of cores in each node 
## Each compute node has 24 cores (See more details in section Hardware on Sisu User Guide).

## System message output file
#SBATCH -o log/HYCICE.JNAME.out

## System error message file
#SBATCH -e log/HYCICE.JNAME.err

## How long job takes, wallclock time hh:mm:ss
#SBATCH -t 1:00:00

#SBATCH  --mail-type=END
#SBATCH --mail-user=jiping.xie@nersc.no

set -x

export NMPI=126
export SLURM_SUBMIT_DIR=$(pwd)
export Nbatch=8 # Note: this number is designed by the whole cores and 
                # and it is better to consistent with Ncore for each job run.
export Ncor=4

MONITORINTERVAL=10 # time interval for periodic checks on job status


# Enter directory from where the job was submitted
cd $SLURM_SUBMIT_DIR       ||  { echo "Could not go to dir $SLURM_SUBMIT_DIR  "; exit 1; }

# ------------------- Fetch Environment ------------------------------
# -------- these are needed in preprocess scripts---------------------
echo "SLURM_JOBID    = $SLURM_JOBID     "
echo "SLURM_SUBMIT_DIR= $SLURM_SUBMIT_DIR "
[ -z "$NOMP" ] && NOMP=0

# Enter directory from where the job was submitted
cd $SLURM_SUBMIT_DIR       ||  { echo "Could not go to dir $SLURM_O_WORKDIR  "; exit 1; }

iPert=2
if [ ${iPert} -gt 0 ]; then
   Pervars="airtmp mslprs precip wndewd wndnwd nswrad radflx shwflx"
fi

if [ "$1" -gt "-1" -a "$2" -gt "-1" ]; then
  echo 'mems: ' $1 '~' $2
  mem1=$1
  mem2=$2
  (( Nens=mem2-mem1+1 ))
  echo 'mems: ' $1 '~' $2 ': ' ${Nens}
else
  exit $? 
fi

# Initialize environment (sets Scratch dir ($S), Data dir $D ++ )
source ../REGION.src  || { echo "Could not source ../REGION.src "; exit 1; }
source ./EXPT.src  || { echo "Could not source EXPT.src"; exit 1; }
echo "NMPI =$NMPI (Number of MPI tasks needed for running job) "

# submit the job: Nbatch members 
(( Ncycl = (${Nens} -1) / ${Nbatch} +1 )) 
for icycl in `seq 1 ${Ncycl}`; do
   (( i1 = $mem1 + (${icycl} - 1) * ${Nbatch} ))
   (( i2 = $mem1 + ${Nbatch} -1 + (${icycl} - 1) * ${Nbatch} ))
   for ii in `seq $i1 $i2`; do
      cd $SLURM_SUBMIT_DIR       ||  { echo "Could not go to dir $SLURM_SUBMIT_DIR  "; exit 1; }
      Exdir=mem`echo 00${ii} | tail -4c`
      if [ ${ii} -le ${mem2} -a -s ${Exdir}/SCTRATCH ]; then
         cd ${Exdir}/SCRATCH
         echo $(pwd)
         if [ ${iPert} -gt 0 ]; then
            ./force_perturb-2.2 era-i era40
            echo " imem=${imem} replaced ${Pervars} ... "
            for ifile in ${Pervars}; do
               if [ -r tst.forcing.${ifile}.a -a -r tst.forcing.${ifile}.b ]; then
                  rm forcing.${ifile}.[ab]
                  ln -sf tst.forcing.${ifile}.a forcing.${ifile}.a
                  ln -sf tst.forcing.${ifile}.b forcing.${ifile}.b
               fi
            done
         fi

         srun --mpi=pmi2 -N $Ncor -n $NMPI ./hycom_cice  &
      fi
   done

   wait
done

# postprocess before to averge in the ensemble 
for imem in `seq $mem1 $mem2`; do
  cd $SLURM_SUBMIT_DIR       ||  { echo "Could not go to dir $SLURM_SUBMIT_DIR  "; exit 1; }
  Exdir=mem`echo 00${imem} | tail -4c`
  cd ${Exdir}/SCRATCH
  # Must be done under mem???/SCRATCH to run this script
  [ ! -r ../data ] && mkdir ../data
  [ ! -r ../data/cice ] && mkdir ../data/cice

  # restart. and archm
  Fhycom="restart. archm. archv."
  for ifile in ${Fhycom} ; do
  for i in $(ls -- ${ifile}*.[ab]) ; do
    if [ -L "${i}" ]; then
      rm $i
    else
      mv $i ../data/.
    fi
  done
  done

  # sea ice fields
  Fcice="iced. iceh."
  for ifile in ${Fcice}; do
  for i in $(ls -- cice/${ifile}*.nc); do
    if [ -L "${i}" ]; then
      rm $i
    else
      mv $i ../data/cice/.
    fi
  done
  done

  # Copy some files useful for analysis
  for i in $(ls regional.grid.* regional.depth.* blkdat.input ice_in cice_*.nc) ; do
     cp $i ../data/.
  done
  #
  # --- HYCOM error stop is implied by the absence of a normal stop.
  #
  if  [ `tail -1 summary_out | grep -c "^normal stop"` == 0 ] ; then
    echo "BADRUN"  > ../hycom.stop
  else
    echo "GOODRUN" > ../hycom.stop
  fi

done


exit $?
